generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  assets        Asset[]


  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}



model Asset {
  id          String    @id @default(cuid())
  name        String
  type        AssetType
  imageUrl    String?
  plantNumber String
  serial      String
  renewals    Renewal[]
  location    String
  upLoadId String? @unique
  upload Upload? @relation(fields: [upLoadId],references: [id], onDelete: Cascade)

  userId String // âœ… foreign key to User
  user   User   @relation(fields: [userId], references: [id]) 

  createdAt DateTime @default(now())
}

model Renewal {
  id          String   @id @default(cuid())
  renewalDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  assetId     String
  renewalType RenewalType
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Upload {
  id        String   @id @default(cuid())
  name      String
  url       String
  fileKey   String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())
  asset Asset?

  @@map("uploads")
}

enum AssetType {
  MACHINERY
  VEHICLE
  EQUIPMENT
}

enum RenewalType {
  CALIBRATION
  CERTIFICATION
  SERVICE
  TESTING
}
